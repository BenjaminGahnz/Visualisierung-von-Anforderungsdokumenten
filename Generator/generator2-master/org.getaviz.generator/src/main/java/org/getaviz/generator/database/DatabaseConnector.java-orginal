package org.getaviz.generator.database;

import org.neo4j.driver.AuthTokens;
import org.neo4j.driver.Driver;
import org.neo4j.driver.GraphDatabase;
import org.neo4j.driver.Session;
import org.neo4j.driver.Transaction;
import org.neo4j.driver.TransactionWork;
import org.neo4j.driver.Result;
import org.neo4j.driver.types.Node;

public class DatabaseConnector implements AutoCloseable {
    private static String URL = "bolt://localhost:7687";
    private static String USERNAME = "neo4j";
    private static String PASSWORD = "Benni1998";
    private final Driver driver;
    private static DatabaseConnector instance = null;

    // Constructor for local database connection
    public DatabaseConnector(String url, String username, String password) {
        this.driver = GraphDatabase.driver(url, AuthTokens.basic(username, password));
    }

    // Default constructor for local database connection with default credentials
    private DatabaseConnector() {
        this(URL, USERNAME, PASSWORD);
    }

    public static String getDatabaseURL() {
        return URL;
    }

    public static DatabaseConnector getInstance() {
        if (instance == null) {
            instance = new DatabaseConnector();
        }
        return instance;
    }

    public static DatabaseConnector getInstance(String url, String username, String password) {
        if (instance == null) {
            instance = new DatabaseConnector(url, username, password);
        }
        return instance;
    }

    public void executeWrite(String... statements) {
        try (Session session = driver.session()) {
            session.writeTransaction((TransactionWork<Void>) tx -> {
                for (String statement : statements) {
                    tx.run(statement);
                }
                return null;
            });
        }
    }

    public Node addNode(String statement, String parameterName) {
        try (Session session = driver.session()) {
            return session.writeTransaction(tx -> {
                Result result = tx.run(statement + " RETURN " + parameterName);
                return result.single().get(parameterName).asNode();
            });
        }
    }

    public Result executeRead(String statement) {
        try (Session session = driver.session()) {
            return session.readTransaction(tx -> tx.run(statement));
        }
    }

    public Node getVisualizedEntity(Long id) {
        return executeRead("MATCH (n)-[:VISUALIZES]->(e) WHERE ID(n) = " + id + " RETURN e").single().get("e").asNode();
    }

    public Node getPosition(Long id) {
        return executeRead("MATCH (n)-[:HAS]->(p:Position) WHERE ID(n) = " + id + " RETURN p").single().get("p").asNode();
    }

    @Override
    public void close() {
        driver.close();
    }
}





















// Database Connector so geändert das er locale DB funktioniert
//! NICHT in Endprodukt integrieren!!
/* OLD OLD 
package org.getaviz.generator.database;

import org.neo4j.driver.v1.AccessMode;
import org.neo4j.driver.v1.AuthTokens; 
import org.neo4j.driver.v1.Driver;
import org.neo4j.driver.v1.GraphDatabase;
import org.neo4j.driver.v1.Session;
import org.neo4j.driver.v1.StatementResult;
import org.neo4j.driver.v1.Transaction;
import org.neo4j.driver.v1.types.Node;

//das hier ist neue Version, aber nur nen versuch kann warscheinlich gelöscht werden


public class DatabaseConnector implements AutoCloseable {
	private static String URL = "bolt://localhost:7687";
    private static String USERNAME = "neo4j";
    private static String PASSWORD = "Benni1998";
	private final Driver driver;
	private static DatabaseConnector instance = null;

	
	//* Ab hier 
	// Constructor for local database connection
    public DatabaseConnector(String url, String username, String password) {
        this.driver = GraphDatabase.driver(url, AuthTokens.basic(username, password));
    }

    // Default constructor for local database connection with default credentials
    private DatabaseConnector() {
        this(URL, USERNAME, PASSWORD);
    }
	
	//*  Wurde empfohlen zu entfernen
	/*private DatabaseConnector(String URL) {
		DatabaseConnector.URL = URL;
		driver = GraphDatabase.driver(URL);
	}
	
	public static String getDatabaseURL() {
		return URL;
	}
	
	public static DatabaseConnector getInstance() {
		if (instance == null) {
			instance = new DatabaseConnector();
		}
		return instance;
	}
	
	public static DatabaseConnector getInstance(String url, String username, String password) {
        if (instance == null) {
            instance = new DatabaseConnector(url, username, password);
        }
        return instance;
    }

	public void executeWrite(String... statements) {
		try (Session session = driver.session(AccessMode.WRITE)) {
			session.writeTransaction((Transaction tx) -> {
				for (String statement : statements) {
					tx.run(statement);
				}
				return 1;
			});
		}
	}
	
	public Node addNode(String statement, String parameterName) {
		Node result;
		try (Session session = driver.session()) {
            try (Transaction tx = session.beginTransaction()) {
                result = tx.run(statement + " RETURN " + parameterName).next().get(parameterName).asNode();
                tx.success();  // Mark this write as successful.
            }
        }
		return result;
	}
	
	public StatementResult executeRead(String statement) {
		try (Session session = driver.session(AccessMode.READ)) {
			return session.run(statement);
		}
	}
	
	public Node getVisualizedEntity(Long id) {
		return executeRead("MATCH (n)-[:VISUALIZES]->(e) WHERE ID(n) = " + id + " RETURN e").single().get("e").asNode();
	}
	
	public Node getPosition(Long id) {
		return executeRead("MATCH (n)-[:HAS]->(p:Position) WHERE ID(n) = " + id + " RETURN p").single().get("p").asNode();
	}

	@Override
	public void close() {
		driver.close();
	}
}
*/
